kfs.version=6.0
mysql.datasource.url=jdbc:mysql://localhost:3306/kfs
oracle.datasource.url=

datasource.username=kfs
datasource.password=kfs
datasource.ojb.platform=${mysql.ojb.platform}

mysql.ojb.platform=MySQL
oracle.ojb.platform=Oracle9i
mysql.driver.class=com.mysql.jdbc.Driver
oracle.driver.class=oracle.jdbc.OracleDriver
oracle.xa.datasource.class=oracle.jdbc.xa.client.OracleXADataSource
mysql.xa.datasource.class=com.mysql.jdbc.jdbc2.optional.MysqlXADataSource
non.xa.pool.datasource.class=bitronix.tm.resource.jdbc.lrc.LrcXADataSource
mysql.ojb.sequence.manager=org.apache.ojb.broker.platforms.KualiMySQLSequenceManagerImpl
oracle.ojb.sequence.manager=org.apache.ojb.broker.util.sequence.SequenceManagerNextValImpl

mysql.server.datasource.platform=org.kuali.rice.core.framework.persistence.platform.MySQLDatabasePlatform

oracle.server.datasource.platform=org.kuali.rice.core.framework.persistence.platform.OracleDatabasePlatform
mysql.impex.admin.username=root
mysql.impex.admin.password=
oracle.impex.admin.username=kuluser_admin
oracle.impex.admin.password=kuluser_admin
oracle.impex.tool.schema=kulusermaint

# default liquibase log level
liquibase.logLevel=info

# The maximum number of connections the persistence broker pool will handle
# When running with Embedded Rice, this can be the same as the datasource.pool.size property.
# When running with a standalone Rice server (to which this server will have direct database connections),
# this property must be the sum of the datasource.pool.maxSize and rice.server.datasource.pool.maxSize
ojb.persistencebroker.pool.maxactive=200

# specify the number of prepared statements cached per connection
#datasource.maximum.cached.preparedstatements=25
# specify the connection timeout
datasource.connection.timeout=100000
# used in datasource configuration to force transactions to timeout after they've run too long
transaction.timeout=${datasource.connection.timeout}

# specify the query used to validate connections as they're pulled from the pool
datasource.validating.query=select 1 from dual

# 0: no check, the connection is taken from the pool without any verification
# 1: test if the connection is closed or not, if it is closed, another connection is tested, until we can return a valid connection
# 2: a test is made on the connection with a jdbc statement string. You need to set this string with setJdbcTestStmt(string test) method on StandardXAPoolDataSource object or StandardPoolDataSource object if you use this one. In a lot of case, you can use "select 1" to test your connection.
# 3: test all the unused connections inside the pool, and verify if a connection is closed. If a connection is closed, the pool removes it and creates a new one if needed.
# 4: verify all the unused connections from the pool with a jdbc statement string (see level 2, to set up a jdbc statement string).
#datasource.xapool.connection.test.mode=2

# values : XAPool | Bitronix | BitronixXa 
connection.pool.impl=XAPool
datasource.pool.maxActive=50
datasource.pool.minIdle=5
datasource.pool.initialSize=5
datasource.pool.maxSize=50
datasource.pool.minSize=5
datasource.pool.maxWait=30000

datasource.btm.journal=null
datasource.btm.transactionTimeout=120

build.directory=build
drivers.directory=${build.directory}/drivers
all.temp.directory=${build.directory}/temp

kfs.datasource.driver.name=${datasource.driver.class}
kfs.datasource.url=${datasource.url}
kfs.datasource.username=${datasource.username}
kfs.datasource.password=${datasource.password}
kfs.datasource.connection.timeout=${datasource.connection.timeout}
kfs.datasource.validating.query=${datasource.validating.query}

kfs.datasource.pool.maxActive=${datasource.pool.maxActive}
kfs.datasource.pool.minIdle=${datasource.pool.minIdle}
kfs.datasource.pool.initialSize=${datasource.pool.initialSize}
kfs.datasource.pool.accessToUnderlyingConnectionAllowed=true
kfs.datasource.pool.maxSize=${datasource.pool.maxSize}
kfs.datasource.pool.minSize=${datasource.pool.minSize}
kfs.datasource.pool.maxWait=${datasource.pool.maxWait}

rice.datasource.driver.name=${rice.server.datasource.driver.class}
rice.datasource.url=${rice.server.datasource.url}
rice.datasource.username=${rice.server.datasource.username}
rice.datasource.password=${rice.server.datasource.password}
rice.datasource.connection.timeout=${rice.server.datasource.connection.timeout}
rice.datasource.validating.query=${rice.server.datasource.validating.query}

rice.datasource.pool.maxSize=${datasource.pool.maxSize}
rice.datasource.pool.minSize=${datasource.pool.minSize}
rice.datasource.pool.maxWait=${datasource.pool.maxWait}
rice.datasource.pool.accessToUnderlyingConnectionAllowed=true
rice.datasource.pool.maxActive=${datasource.pool.maxActive}
rice.datasource.pool.minIdle=${datasource.pool.minIdle}
rice.datasource.pool.initialSize=${datasource.pool.initialSize}

#datasource.pool.class=${pool.datasource.class}
datasource.pool.class.non.xa=bitronix.tm.resource.jdbc.lrc.LrcXADataSource

rice.server.datasource.username=${datasource.username}
rice.server.datasource.password=${datasource.password}
rice.server.datasource.connection.timeout=${datasource.connection.timeout}
rice.server.datasource.validating.query=${datasource.validating.query}
rice.server.datasource.maximum.cached.preparedstatements=${datasource.maximum.cached.preparedstatements}